{"submission_id": "1102", "source": "//C++17\u304c\u4f7f\u3044\u305f\u3044\u9854\u3092\u3057\u3066\u3044\u308b\r\n\r\n#include <iostream>\r\n#include <string_view>\r\n#include <iterator>\r\n#include <array>\r\n\r\nstatic constexpr std::array<const char,128> next = {{\r\n  72,   0,   0,   0,   0,   0,   0,   0,    0,   0,\r\n   0,   0,   0,   0,   0,   0,   0,   0,    0,   0,\r\n   0,   0,   0,   0,   0,   0,   0,   0,    0,   0,\r\n   0,   0,  80,   0,   0,   0,   0,   0,    0,   0,\r\n   0,   0,   0,   0,  32,   0,   0,   0,    0,   0,\r\n   0,   0,   0,   0,   0,   0,   0,   0,    0,   0,\r\n   0,   0,   0,   0,   0,   0,   0,  80,    0,   0,\r\n   0,   0, 101,   0,   0,   0,   0,   0,    0,   0,\r\n  67,   0,   0,   0,   0,   0,   0,   0,    0,   0,\r\n   0,   0,   0,   0,   0,   0,   0,   0,    0,   0,\r\n   0, 108,   0,   0,   0,   0,   0,   0, -111,   0,\r\n   0,  44,   0,   0,   0,   0,   0,   0,    0,   0,\r\n   0,   0,   0,   0,   0,   0,   0\r\n}};\r\n\r\nstruct we_should_return_to_tokyo{\r\n  struct iterator{\r\n    signed char status = 0;\r\n    char operator*()const{return std::abs(status);}\r\n    iterator& operator++(){\r\n      const char n = next[std::abs(status)];\r\n      if(status < 0 && n < 0)\r\n        status = -n;\r\n      else if(n < 0)\r\n        status = -status;\r\n      else\r\n        status = n;\r\n      return *this;\r\n    }\r\n    constexpr bool operator!=(const iterator& rhs)const{return status != rhs.status;}\r\n  };\r\n  iterator begin()const{return ++iterator{};}\r\n  iterator end()const{return iterator{127};}\r\n};\r\n\r\nstruct{\r\n  template<typename T>\r\n  class take_t{\r\n    T t;\r\n    std::size_t n;\r\n   public:\r\n    template<typename U>\r\n    constexpr take_t(U&& u, std::size_t n):t{std::forward<U>(u)}, n{n}{}\r\n    class iterator{\r\n      using base = typename T::iterator;\r\n      base it;\r\n      std::size_t i;\r\n     public:\r\n      iterator(const base& t, std::size_t i):it{t}, i{i}{}\r\n      iterator& operator++(){++it;++i;return *this;}\r\n      auto operator*()const{return *it;}\r\n      auto operator*(){return *it;}\r\n      constexpr bool operator!=(const iterator& rhs)const{return i != rhs.i;}\r\n    };\r\n    iterator begin()const{return iterator{t.begin(), 0};}\r\n    iterator end()const{return iterator{t.end(), n};}\r\n  };\r\n  struct maker{\r\n    std::size_t t;\r\n    template<typename U>\r\n    friend constexpr take_t<std::decay_t<U>> operator|(U&& u, const maker p){return take_t<std::decay_t<U>>(std::forward<U>(u), p.t);}\r\n  };\r\n  constexpr maker operator()(std::size_t t)const{return maker{t};}\r\n}static constexpr take = {};\r\n\r\nint main(){\r\n  for(auto&& x : we_should_return_to_tokyo{} | take(10))\r\n    std::cout << x;\r\n  std::cout << std::endl;\r\n}\r\n\r\n", "problem_id": "79", "problem_title": "Hello, PCP", "datetime": "2018-08-07 06:24:56", "lang": "C++", "user": "I", "sample_io": ["Accepted"], "testcase": [{"result": "Accepted", "max_score": "100", "io_result": ["Accepted"]}], "result": "Accepted", "score": "100", "max_score": "100"}