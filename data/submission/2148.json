{"submission_id": "2148", "source": "# include \"bits/stdc++.h\"\r\nusing namespace std;\r\nusing LL = long long;\r\nusing ULL = unsigned long long;\r\nconst double PI = acos(-1);\r\ntemplate<class T>constexpr T INF() { return ::std::numeric_limits<T>::max(); }\r\ntemplate<class T>constexpr T HINF() { return INF<T>() / 2; }\r\ntemplate <typename T_char>T_char TL(T_char cX) { return tolower(cX); };\r\ntemplate <typename T_char>T_char TU(T_char cX) { return toupper(cX); };\r\ntypedef pair<LL, LL> pii;\r\nconst int vy[] = { -1, -1, -1, 0, 1, 1, 1, 0 }, vx[] = { -1, 0, 1, 1, 1, 0, -1, -1 };\r\nconst int dx[4] = { -1,0,1,0 }, dy[4] = { 0,-1,0,1 };\r\nconst char dir[4] = { 'u','l','d','r' };\r\nint popcnt(unsigned long long n) { int cnt = 0; for (int i = 0; i < 64; i++)if ((n >> i) & 1)cnt++; return cnt; }\r\nint d_sum(LL n) { int ret = 0; while (n > 0) { ret += n % 10; n /= 10; }return ret; }\r\nint d_cnt(LL n) { int ret = 0; while (n > 0) { ret++; n /= 10; }return ret; }\r\nLL gcd(LL a, LL b) { if (b == 0)return a; return gcd(b, a%b); };\r\nLL lcm(LL a, LL b) { LL g = gcd(a, b); return a / g*b; };\r\n# define ALL(qpqpq)           (qpqpq).begin(),(qpqpq).end()\r\n# define UNIQUE(wpwpw)        sort(ALL((wpwpw)));(wpwpw).erase(unique(ALL((wpwpw))),(wpwpw).end())\r\n# define LOWER(epepe)         transform(ALL((epepe)),(epepe).begin(),TL<char>)\r\n# define UPPER(rprpr)         transform(ALL((rprpr)),(rprpr).begin(),TU<char>)\r\n# define FOR(i,tptpt,ypypy)   for(LL i=(tptpt);i<(ypypy);i++)\r\n# define REP(i,upupu)         FOR(i,0,upupu)\r\n# define INIT                 std::ios::sync_with_stdio(false);std::cin.tie(0)\r\n# pragma warning(disable:4996)\r\n\r\nLL m;\r\nstring n;\r\n\r\nint main() {\r\n\tcin >> n >> m;\r\n\tLL ans = 0;\r\n\tREP(i, n.size()) {\r\n\t\tans *= 10;\r\n\t\tans += (n[i] - '0');\r\n\t\tans %= m;\r\n\t}\r\n\tcout << ans << endl;\r\n}", "problem_id": "112", "problem_title": "(300)mod!mod!akusyounin!", "datetime": "2018-08-25 13:08:11", "lang": "C++", "user": "tancahn2380", "sample_io": ["Accepted", "Accepted"], "testcase": [{"result": "Accepted", "max_score": "300", "io_result": ["Accepted", "Accepted", "Accepted"]}], "result": "Accepted", "score": "300", "max_score": "300"}