{"submission_id": "479", "source": "#include<iostream>\r\n#include<algorithm>\r\n#include<functional>\r\n#include<vector>\r\n#include<queue>\r\n#include<tuple>\r\n#define PP std::pair<int,int>\r\n#define TT std::tuple<int,int,int>\r\n\r\nint N, M;\r\nint per[4];\r\n\r\nstruct edge {\r\n\tint to, com, cost;\r\n};\r\n\r\nstd::vector<edge> G[25010];\r\nint D[100010][1 << 4];\r\n\r\n\r\nstruct node {\r\n\tint now, card, cost;\r\n\tbool operator<(const node& n1) const{\r\n\t\treturn n1.cost < cost;\r\n\t}\r\n};\r\n\r\n\r\nint main() {\r\n\tstd::cin >> N >> M;\r\n\tfor (int i = 0; i<4; i++) {\r\n\t\tstd::cin >> per[i];\r\n\t}\r\n\tfor (int i = 0; i <= N; i++) {\r\n\t\tfor (int j = 0; j < 1 << 4; j++) {\r\n\t\t\tD[i][j] = 1 << 30;\r\n\t\t}\r\n\t}\r\n\tfor (int i = 0; i < M; i++) {\r\n\t\tint p, q, cost;\r\n\t\tchar com;\r\n\t\tstd::cin >> p >> q >> com >> cost;\r\n\t\tG[p].emplace_back(edge{ q, com - 'A', cost });\r\n\t\tG[q].emplace_back(edge{ p, com - 'A', cost });\r\n\t}\r\n\tstd::priority_queue<node> pq;\r\n\tpq.push(node{ 1,0,0 });\r\n\tD[1][0] = 0;\r\n\twhile (!pq.empty()) {\r\n\t\tnode e = pq.top();\r\n\t\tpq.pop();\r\n\t\tif (D[e.now][e.card]>e.cost)continue;\r\n\t\tD[e.now][e.card] = e.cost;\r\n\t\tfor (auto u : G[e.now]) {\r\n\t\t\tnode n = e;\r\n\t\t\tn.now = u.to;\r\n\t\t\tif (!(1 & (e.card >> u.com))) {\r\n\t\t\t\tn.card = n.card | 1 << u.com;\r\n\t\t\t\tn.cost += per[u.com];\r\n\t\t\t}\r\n\t\t\tn.cost += u.cost;\r\n\t\t\tif (D[n.now][n.card]>n.cost) {\r\n\t\t\t\tD[n.now][n.card] = n.cost;\r\n\t\t\t\tpq.push(n);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tint ans = 1 << 30;\r\n\tfor (int i = 0; i<1 << 4; i++) {\r\n\t\tans = std::min(ans, D[N][i]);\r\n\t}\r\n\tstd::cout << ans << std::endl;\r\n\treturn 0;\r\n}", "problem_id": "52", "problem_title": "TRAVELER", "datetime": "2018-07-31 23:30:27", "lang": "C++", "user": "weiwei12", "sample_io": ["WrongAnswer"], "result": "WrongAnswer", "testcase": [{"result": "WrongAnswer", "max_score": "100", "io_result": ["Accepted", "WrongAnswer", "Accepted", "Accepted", "Accepted"]}], "score": "0", "max_score": "100"}