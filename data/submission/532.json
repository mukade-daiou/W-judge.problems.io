{"submission_id": "532", "source": "#include <iostream>\r\n#include <queue>\r\n#include <algorithm>\r\n\r\nusing Pair = std::pair<int, int>;\r\n\r\nconstexpr int dx[] = {0, 1, 0, -1};\r\nconstexpr int dy[] = {1, 0, -1, 0};\r\n\r\nconstexpr int INF = 1000000;\r\nconstexpr int MAX_N = 100000;\r\nconstexpr int MAX_HW = 1000;\r\n\r\nint N, H, W, Sh, Sw;\r\n\r\nint dis[MAX_HW][MAX_HW];\r\nint burnt_area[MAX_HW][MAX_HW];\r\n\r\nvoid min_update(int& a, int& b){\r\n\ta = std::min(a, b);\r\n}\r\n\r\nint bfs();\r\n\r\nint main(){\r\n\r\n\tstd::cin >> N >> H >> W >> Sh >> Sw;\r\n\r\n\tfor(int i = 0; i < H; ++i){\r\n\t\tfor(int j = 0; j < W; ++j){\r\n\t\t\tdis[i][j] = -1;\r\n\t\t\tburnt_area[i][j] = INF + 1;\r\n\t\t}\r\n\t}\r\n\r\n\tfor(int i = 0; i < N; ++i){\r\n\r\n\t\tint h, w, a, t;\r\n\t\tstd::cin >> h >> w >> a >> t;\r\n\r\n\t\tfor(int i = 0; i < a; ++i){\r\n\t\t\tfor(int j = 0; j <= i; ++j){\r\n\t\t\t\tmin_update(burnt_area[h - j][w - (i - j)], t);\r\n\t\t\t\tmin_update(burnt_area[h + j][w - (i - j)], t);\r\n\t\t\t\tmin_update(burnt_area[h - j][w + (i - j)], t);\r\n\t\t\t\tmin_update(burnt_area[h + j][w + (i - j)], t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tdis[Sh][Sw] = 0;\r\n\r\n\tstd::cout << bfs() << std::endl;\r\n\r\n\treturn 0;\r\n}\r\n\r\nint bfs(){\r\n\r\n\tstd::queue<Pair> que;\r\n\tque.push(Pair(Sh, Sw));\r\n\r\n\twhile(!que.empty()){\r\n\t\tPair cur = que.front();\r\n\t\tque.pop();\r\n\r\n\t\tint ch = cur.first, cw = cur.second;\r\n\r\n\t\tfor(int i = 0; i < 4; ++i){\r\n\t\t\tint nh = ch + dx[i];\r\n\t\t\tint nw = cw + dy[i];\r\n\r\n\t\t\tif(nh < 0 || nw < 0 || nh >= H || nw >= W){\r\n\t\t\t\treturn dis[ch][cw] + 1;\r\n\t\t\t}\r\n\r\n\t\t\tif(dis[nh][nw] != -1){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif(burnt_area[nh][nw] <= dis[ch][cw] + 1){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tdis[nh][nw] = dis[ch][cw] + 1;\r\n\t\t\tque.push(Pair(nh, nw));\r\n\t\t}\r\n\t}\r\n\r\n\treturn -1;\r\n}\r\n", "problem_id": "68", "problem_title": "\u9695\u77f3", "datetime": "2018-08-04 01:22:03", "lang": "C++", "user": "taiki_okano", "sample_io": ["Accepted"], "testcase": [{"result": "RuntimeError", "max_score": "100", "io_result": ["Accepted", "RuntimeError", "RuntimeError", "RuntimeError", "RuntimeError", "RuntimeError", "RuntimeError", "RuntimeError", "RuntimeError", "RuntimeError", "RuntimeError"]}], "result": "RuntimeError", "score": "0", "max_score": "100"}