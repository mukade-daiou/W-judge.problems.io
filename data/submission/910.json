{"submission_id": "910", "source": "# include \"bits/stdc++.h\"\r\nusing namespace std;\r\nusing LL = long long;\r\nusing ULL = unsigned long long;\r\nconst double PI = acos(-1);\r\ntemplate<class T>constexpr T INF() { return ::std::numeric_limits<T>::max(); }\r\ntemplate<class T>constexpr T HINF() { return INF<T>() / 2; }\r\ntemplate <typename T_char>T_char TL(T_char cX) { return tolower(cX); };\r\ntemplate <typename T_char>T_char TU(T_char cX) { return toupper(cX); };\r\ntypedef pair<LL, LL> pii;\r\nconst int vy[] = { -1, -1, -1, 0, 1, 1, 1, 0 }, vx[] = { -1, 0, 1, 1, 1, 0, -1, -1 };\r\nconst int dx[4] = { 0,1,0,-1 }, dy[4] = { 1,0,-1,0 };\r\nint popcnt(unsigned long long n) { int cnt = 0; for (int i = 0; i < 64; i++)if ((n >> i) & 1)cnt++; return cnt; }\r\nint d_sum(LL n) { int ret = 0; while (n > 0) { ret += n % 10; n /= 10; }return ret; }\r\nint d_cnt(LL n) { int ret = 0; while (n > 0) { ret++; n /= 10; }return ret; }\r\nLL gcd(LL a, LL b) { if (b == 0)return a; return gcd(b, a%b); };\r\nLL lcm(LL a, LL b) { LL g = gcd(a, b); return a / g*b; };\r\n# define ALL(qpqpq)           (qpqpq).begin(),(qpqpq).end()\r\n# define UNIQUE(wpwpw)        sort(ALL((wpwpw)));(wpwpw).erase(unique(ALL((wpwpw))),(wpwpw).end())\r\n# define LOWER(epepe)         transform(ALL((epepe)),(epepe).begin(),TL<char>)\r\n# define UPPER(rprpr)         transform(ALL((rprpr)),(rprpr).begin(),TU<char>)\r\n# define FOR(i,tptpt,ypypy)   for(LL i=(tptpt);i<(ypypy);i++)\r\n# define RFOR(i,tptpt,ypypy)  for(LL i=(tptpt);i>=(ypypy);i--)\r\n# define REP(i,upupu)         FOR(i,0,upupu)\r\n# define INIT                 std::ios::sync_with_stdio(false);std::cin.tie(0)\r\n\r\n\r\nstruct RLUQ {\r\n\tstruct query {\r\n\t\tint type;//0=empty, 1=set\r\n\t\tint value;\r\n\t\tquery(int a = 0, int b = 0) :type(a), value(b) {}\r\n\t};\r\n\tquery s[(1 << 18)];\r\n\tint t[(1 << 18)];\r\n\tRLUQ() {\r\n\t\tfill(t, t + (1 << 18), 0);\r\n\t}\r\n\tvoid compute(int k, int l, int r) {\r\n\t\tquery q = s[k];\r\n\t\ts[k].type = 0;\r\n\t\tif (q.type == 0 || r - l == 1)return;\r\n\t\ts[k * 2 + 1] = s[k * 2 + 2] = q;\r\n\t\tt[k * 2 + 1] = t[k * 2 + 2] = q.value;\r\n\t}\r\n\tvoid Set(int a, int b, int x, int k = 0, int l = 0, int r = (1 << 17)) {\r\n\t\tif (b <= l || r <= a)return;\r\n\t\tcompute(k, l, r);\r\n\t\tif (a <= l && r <= b) {\r\n\t\t\ts[k] = query(1, x);\r\n\t\t\tt[k] = x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tint m = (l + r) / 2;\r\n\t\t\tSet(a, b, x, k * 2 + 1, l, m);\r\n\t\t\tSet(a, b, x, k * 2 + 2, m, r);\r\n\t\t\tt[k] = min(t[k * 2 + 1], t[k * 2 + 2]);\r\n\t\t}\r\n\t}\r\n\tint Get(int a, int b, int k = 0, int l = 0, int r = (1 << 17)) {\r\n\t\tif (b <= l || r <= a)return INT_MAX;\r\n\t\tcompute(k, l, r);\r\n\t\tif (a <= l && r <= b) {\r\n\t\t\treturn t[k];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tint m = (l + r) / 2;\r\n\t\t\tint lv = Get(a, b, k * 2 + 1, l, m);\r\n\t\t\tint rv = Get(a, b, k * 2 + 2, m, r);\r\n\t\t\treturn min(lv, rv);\r\n\t\t}\r\n\t}\r\n};\r\nint n, m;\r\nint input[4][101010];\r\nvector<int> v;\r\n\r\n\r\nmap<int, int> zip;\r\nint unzip[101010];\r\n\r\nint compress(vector<int> &x) {\r\n\tsort(x.begin(), x.end());\r\n\tx.erase(unique(x.begin(), x.end()), x.end());\r\n\tfor (int i = 0; i < x.size(); i++) {\r\n\t\tzip[x[i]] = i;\r\n\t\tunzip[i] = x[i];\r\n\t}\r\n\treturn x.size();\r\n}\r\n\r\nint main() {\r\n\tcin >> n >> m;\r\n\tREP(i, m) {\r\n\t\tcin >> input[0][i];\r\n\t\tif (input[0][i] == 1) {\r\n\t\t\tcin >> input[1][i] >> input[2][i] >> input[3][i];\r\n\t\t\tv.emplace_back(input[1][i]);\r\n\t\t\tv.emplace_back(input[2][i]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcin >> input[1][i];\r\n\t\t\tv.emplace_back(input[1][i]);\r\n\t\t}\r\n\t}\r\n\tv.emplace_back(0);\r\n\tv.emplace_back(n);\r\n\tRLUQ seg;\r\n\tREP(i, m) {\r\n\t\tif (input[0][i] == 1) {\r\n\t\t\tseg.Set(zip[input[1][i]], zip[input[2][i]]+1, input[3][i]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcout << seg.Get(zip[input[1][i]], zip[input[1][i]]+1) << endl;\r\n\t\t}\r\n\t}\r\n\t//system(\"pause\");\r\n}", "problem_id": "70", "problem_title": "Range Set Query", "datetime": "2018-08-06 15:25:21", "lang": "C++", "user": "rintarou", "sample_io": ["WrongAnswer"], "result": "WrongAnswer", "testcase": [{"result": "WrongAnswer", "max_score": "40", "io_result": ["WrongAnswer", "WrongAnswer", "WrongAnswer", "WrongAnswer", "WrongAnswer"]}, {"result": "WrongAnswer", "max_score": "60", "io_result": ["WrongAnswer", "WrongAnswer", "WrongAnswer", "WrongAnswer", "WrongAnswer"]}], "score": "0", "max_score": "100"}