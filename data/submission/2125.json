{"submission_id": "2125", "source": "#include \"bits/stdc++.h\"\r\n\r\nusing namespace std;\r\nusing ll = long long;\r\nusing ull = unsigned long long;\r\n\r\ntypedef pair<int, int>pi;\r\ntypedef pair<ll, ll> P;\r\ntypedef pair<ll, P> PP;\r\ntypedef pair<P, P> PPP;\r\n\r\nconst ll MOD = 1e9 + 7;\r\nconst ll INF = 9e18;\r\nconst double DINF = 5e14;\r\nconst double eps = 1e-10;\r\nconst int di[4] = { 1,0,-1,0 }, dj[4] = { 0,1,0,-1 };\r\n\r\n#define ALL(x) (x).begin(),(x).end()\r\n#define ALLR(x) (x).rbegin(),(x).rend()\r\n#define pb push_back\r\n#define eb emplace_back\r\n#define fr first\r\n#define sc second\r\n\r\n\r\nstruct LazySegmentTree {\r\nprivate:\r\n\tint n;\r\n\tvector<ll> node, lazy;\r\n\r\npublic:\r\n\tLazySegmentTree(vector<ll> v) {\r\n\t\tint sz = (int)v.size();\r\n\t\tn = 1; while (n < sz) n *= 2;\r\n\t\tnode.resize(2 * n - 1);\r\n\t\tlazy.resize(2 * n - 1, 0);\r\n\r\n\t\tfor (int i = 0; i<sz; i++) node[i + n - 1] = v[i];\r\n\t\tfor (int i = n - 2; i >= 0; i--) node[i] = node[i * 2 + 1] + node[i * 2 + 2];\r\n\t}\r\n\r\n\tvoid eval(int k, int l, int r) {\r\n\t\tif (lazy[k] != 0) {\r\n\t\t\tnode[k] += lazy[k];\r\n\t\t\tif (r - l > 1) {\r\n\t\t\t\tlazy[2 * k + 1] += lazy[k] / 2;\r\n\t\t\t\tlazy[2 * k + 2] += lazy[k] / 2;\r\n\t\t\t}\r\n\t\t\tlazy[k] = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tvoid add(int a, int b, ll x, int k = 0, int l = 0, int r = -1) {\r\n\t\tif (r < 0) r = n;\r\n\t\teval(k, l, r);\r\n\t\tif (b <= l || r <= a) return;\r\n\t\tif (a <= l && r <= b) {\r\n\t\t\tlazy[k] += (r - l) * x;\r\n\t\t\teval(k, l, r);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tadd(a, b, x, 2 * k + 1, l, (l + r) / 2);\r\n\t\t\tadd(a, b, x, 2 * k + 2, (l + r) / 2, r);\r\n\t\t\tnode[k] = node[2 * k + 1] + node[2 * k + 2];\r\n\t\t}\r\n\t}\r\n\r\n\tll getsum(int a, int b, int k = 0, int l = 0, int r = -1) {\r\n\t\tif (r < 0) r = n;\r\n\t\teval(k, l, r);\r\n\t\tif (b <= l || r <= a) return 0;\r\n\t\tif (a <= l && r <= b) return node[k];\r\n\t\tll vl = getsum(a, b, 2 * k + 1, l, (l + r) / 2);\r\n\t\tll vr = getsum(a, b, 2 * k + 2, (l + r) / 2, r);\r\n\t\treturn vl + vr;\r\n\t}\r\n};\r\n\r\nll n, b[100010], c[100010], x[100010];\r\nint a[100010], q;\r\nvector<ll>v, ans;\r\n\r\nint main() {\r\n\tcin >> n >> q;\r\n\tfor (int i = 0;i < q;i++) {\r\n\t\tcin >> a[i];\r\n\t\tif (a[i]) {\r\n\t\t\tcin >> b[i];\r\n\t\t\tv.eb(b[i]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcin >> b[i] >> c[i] >> x[i];\r\n\t\t\tv.eb(b[i]);\r\n\t\t\tv.eb(c[i]);\r\n\t\t}\r\n\t}\r\n\tsort(ALL(v));\r\n\tv.erase(unique(ALL(v)), v.end());\r\n\tans.resize(300010);\r\n\tLazySegmentTree seg(ans);\r\n\tfor (int i = 0;i < q;i++) {\r\n\t\tif (!a[i]) {\r\n\t\t\tint it = lower_bound(ALL(v), b[i]) - v.begin();\r\n\t\t\tint it2 = upper_bound(ALL(v), c[i]) - v.begin();\r\n\t\t\tseg.add(it, it2, x[i]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcout << seg.getsum(lower_bound(ALL(v), b[i]) - v.begin(), lower_bound(ALL(v), b[i]) - v.begin() + 1) << endl;\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}", "problem_id": "114", "problem_title": "(500)Range Add Query", "datetime": "2018-08-25 10:54:56", "lang": "C++", "user": "Teacher", "sample_io": ["Accepted"], "testcase": [{"result": "Accepted", "max_score": "0", "io_result": ["Accepted"]}, {"result": "WrongAnswer", "max_score": "500", "io_result": ["Accepted", "WrongAnswer", "WrongAnswer", "WrongAnswer", "WrongAnswer", "WrongAnswer", "WrongAnswer", "WrongAnswer", "WrongAnswer", "WrongAnswer"]}], "result": "WrongAnswer", "score": "0", "max_score": "500"}