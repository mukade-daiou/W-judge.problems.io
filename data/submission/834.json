{"submission_id": "834", "source": "#include \"bits/stdc++.h\"\r\n\r\nusing namespace std;\r\nusing ll = long long;\r\nusing ull = unsigned long long;\r\n\r\ntypedef pair<ll, ll> P;\r\ntypedef pair<double, double >pd;\r\ntypedef pair<string, string> sP;\r\ntypedef pair<ll, P> PP;\r\ntypedef pair<P, P> PPP;\r\n\r\nconst ll MOD = 1e9 + 7;\r\nconst ll MOD2 = 998244353;\r\nconst ll INF = 1 << 30;\r\nconst ll INF2 = 9e18;\r\nconst double INF3 = 5e14;\r\nconst double eps = 1e-10;\r\nconst double PI = acos(-1);\r\nconst int dx[4] = { 1,0,-1,0 }, dy[4] = { 0,1,0,-1 };\r\n\r\n#define ALL(x) (x).begin(),(x).end()\r\n#define ALLR(x) (x).rbegin(),(x).rend()\r\n#define pb push_back\r\n#define eb emplace_back\r\n#define fr first\r\n#define sc second\r\n\r\n\r\n\r\nll n, m, a, s, t, v, k;\r\n\r\nstruct LazySegmentTree {\r\nprivate:\r\n\tll n;\r\n\tvector<ll> node, lazy;\r\n\tvector<bool> lazyFlag;\r\n\r\npublic:\r\n\tLazySegmentTree(vector<ll> v) {\r\n\t\tint sz = (int)v.size();\r\n\t\tn = 1; while (n < sz) n *= 2;\r\n\t\tnode.resize(2 * n - 1);\r\n\t\tlazy.resize(2 * n - 1, INF);\r\n\t\tlazyFlag.resize(2 * n - 1, false);\r\n\r\n\t\tfor (int i = 0; i<sz; i++) node[i + n - 1] = v[i];\r\n\t\tfor (int i = n - 2; i >= 0; i--) node[i] = min(node[i * 2 + 1], node[i * 2 + 2]);\r\n\t}\r\n\r\n\tvoid lazyEvaluate(int k, int l, int r) {\r\n\t\tif (lazyFlag[k]) {\r\n\t\t\tnode[k] = lazy[k];\r\n\t\t\tif (r - l > 1) {\r\n\t\t\t\tlazy[k * 2 + 1] = lazy[k * 2 + 2] = lazy[k];\r\n\t\t\t\tlazyFlag[k * 2 + 1] = lazyFlag[k * 2 + 2] = true;\r\n\t\t\t}\r\n\t\t\tlazyFlag[k] = false;\r\n\t\t}\r\n\t}\r\n\r\n\tvoid update(int a, int b, int x, int k = 0, int l = 0, int r = -1) {\r\n\t\tif (r < 0) r = n;\r\n\t\tlazyEvaluate(k, l, r);\r\n\t\tif (b <= l || r <= a) return;\r\n\t\tif (a <= l && r <= b) {\r\n\t\t\tlazy[k] = x;\r\n\t\t\tlazyFlag[k] = true;\r\n\t\t\tlazyEvaluate(k, l, r);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tupdate(a, b, x, 2 * k + 1, l, (l + r) / 2);\r\n\t\t\tupdate(a, b, x, 2 * k + 2, (l + r) / 2, r);\r\n\t\t\tnode[k] = min(node[2 * k + 1], node[2 * k + 2]);\r\n\t\t}\r\n\t}\r\n\r\n\tll find(int a, int b, int k = 0, int l = 0, int r = -1) {\r\n\t\tif (r < 0) r = n;\r\n\t\tlazyEvaluate(k, l, r);\r\n\t\tif (b <= l || r <= a) return INF;\r\n\t\tif (a <= l && r <= b) return node[k];\r\n\t\tint vl = find(a, b, 2 * k + 1, l, (l + r) / 2);\r\n\t\tint vr = find(a, b, 2 * k + 2, (l + r) / 2, r);\r\n\t\treturn min(vl, vr);\r\n\t}\r\n};\r\nint main() {\r\n\tcin >> n >> m;\r\n\tif (n > 100000)return 0;\r\n\tvector<ll>q;\r\n\tq.resize(n+1, 0);\r\n\tLazySegmentTree seg(q);\r\n\tfor (int i = 0;i < m;i++) {\r\n\t\tcin >> a;\r\n\t\tif (a == 1) {\r\n\t\t\tcin >> s >> t >> v;\r\n\t\t\tseg.update(s, t, v);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcin >> k;\r\n\t\t\tcout << seg.find(k, k + 1) << endl;\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}\r\n", "problem_id": "70", "problem_title": "Range Set Query", "datetime": "2018-08-06 14:51:29", "lang": "C++", "user": "kaneshun", "sample_io": ["Accepted"], "testcase": [{"result": "WrongAnswer", "max_score": "40", "io_result": ["WrongAnswer", "Accepted", "Accepted", "WrongAnswer", "Accepted"]}, {"result": "WrongAnswer", "max_score": "60", "io_result": ["WrongAnswer", "WrongAnswer", "WrongAnswer", "WrongAnswer", "WrongAnswer"]}], "result": "WrongAnswer", "score": "0", "max_score": "100"}